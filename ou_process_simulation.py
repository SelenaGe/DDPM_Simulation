# -*- coding: utf-8 -*-
"""OU process simulation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bVeo05UF44kjkG60G-bgr9gxYBJf2Y2M
"""

import numpy as np
import matplotlib.pyplot as plt

# Parameters for the OU process
theta_star = np.array([0.1, -0.2, 1, 0.5, -0.5])  # Long-term mean
sigma = 0.1  # Standard deviation
gamma = 0.01  # Step-size
theta_0 = np.zeros(len(theta_star))  # Initial condition (zero vector)
t_final = 100  # Final time
dt = 0.01  # Time step

# Time steps
timesteps = int(t_final / dt)

# Initialize the array to store the theta values
theta = np.zeros((timesteps + 1, len(theta_star)))
theta[0] = theta_0

# Simulate the OU process
for t in range(1, timesteps + 1):
    dW = np.sqrt(dt) * np.random.normal(0, 1, len(theta_star))  # Brownian motion
    theta[t] = theta[t-1] + 0.1 * (theta_star - theta[t-1]) * dt + np.sqrt(gamma * sigma**2/2) * dW #Equation from Ex10

# Plotting the result
plt.figure(figsize=(12, 6))
for i in range(len(theta_star)):
    plt.plot(np.linspace(0, t_final, timesteps + 1), theta[:, i], label=f"θ_{i+1}(t)")

plt.title("Ornstein-Uhlenbeck Process Simulation")
plt.xlabel("Interations t")
plt.ylabel("θ(t)")
plt.legend()
plt.grid(True)
plt.show()

